/*
 * Copyright (C) 2016 Upper Stream Software.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package main

import (
	"flag"
	"io"
	"os"
	"path/filepath"
	"strings"
	"unicode"
	"unicode/utf8"
)

const (
	apache = `/*
 * Copyright (C) 2016 Upper Stream Software.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.package main
 */`
	cc0 = `// This file is subject to the CC0 1.0 Universal (CC0 1.0) Public Domain Dedication
// license.  Its contents can be found at:
// http://creativecommons.org/publicdomain/zero/1.0
`
	autogenerated = `// Code generated by files2go.
// Do not modify this file.
`
)

func main() {
	outputFlag := flag.String("o", "", "Write the output into the specified file.")
	packageFlag := flag.String("p", "main", "Package name that the generated file belongs to.")
	headerFlag := flag.String("d", "autogenerated", "File header {apache|cc0|autogenerated}.")
	flag.Parse()
	if flag.NArg() == 0 {
		flag.Usage()
		os.Exit(2)
	}
	var header string
	switch *headerFlag {
	case "apache":
		header = apache
	case "cc0":
		header = cc0
	case "autogenerated":
		header = autogenerated
	default:
		flag.Usage()
		os.Exit(2)
	}

	var output *os.File
	if len(*outputFlag) == 0 {
		output = os.Stdout
	} else {
		var err1 error
		output, err1 = os.Create(*outputFlag)
		if err1 != nil {
			panic(err1.Error())
		}
		defer output.Close()
	}
	if err2 := doFiles2go(*packageFlag, header, output, os.Args[len(os.Args)-flag.NArg():len(os.Args)]); err2 != nil {
		output.Close()
		panic(err2.Error())
	}
}

func doFiles2go(pkg string, header string, output io.Writer, files []string) error {
	output.Write([]byte(header + `
package ` + pkg + `

const (
`))
	for _, filename := range files {
		if err := func() error {
			basename := strings.TrimSuffix(filename, filepath.Ext(filename))
			if r, _ := utf8.DecodeRuneInString(filename); unicode.IsUpper(r) {
				output.Write([]byte("// " + basename + " contains the content of " + filename + "\n"))
			}
			output.Write([]byte(basename + " string = `"))
			f, err := os.Open(filename)
			if err != nil {
				return err
			}
			defer f.Close()
			io.Copy(output, f)
			output.Write([]byte("`\n"))
			return nil
		}(); err != nil {
			return err
		}
	}
	output.Write([]byte(")\n"))
	return nil
}
